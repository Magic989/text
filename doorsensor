#include "STC15Wxx.h"
#include "intrins.h"

#define LED_WORK_STA   P31	//0不亮，无动作  1蓝灯，关门或开门操作
#define YELLOW_BAT     P30	//0不亮，电池正常	1黄灯，电池低压
#define BAT_LOW        P33	//0电池低压  1电池正常
#define STA_DOOR_OPEN  P35	//0门开  1门关
#define STA_DOOR_CLOSE P34	//0门关  1门开

#define FOSC 11059200L
#define T1MS (65536-FOSC/1000)      //1T模式

unsigned char flag_Door;    //0无动作  1关门  2开门    用于中断
unsigned char DoorSta;      //0无动作  1关门  2开门    用于确定门的状态
unsigned char flag_VoltLow; //0电池正常  1电池低压  2电池低压中

//12T非自动重载16位定时器，f = 5.5296MHz
//12.8ms TH0 0xE8 TL0 0xF5
#define OOKTongH 0xE8
#define OOKTongL 0xF5
//0.4ms TH0 0xFF TL0 0x47
#define OOKSmallH 0xFF
#define OOKSmallL 0x47
//1.2ms TH0 0xFD TL0 0xD6
#define OOKBigH 0xFD
#define OOKBigL 0xD6

unsigned char coding[100];
	


void OOKDataSent(unsigned char SentDat)  //发送信号
{
	unsigned char i,j,dat;
	unsigned char data2,data1,data0;
	
	//将OOK数据的功能码添加到发射数据中
	data0 &= 0xf0;
	SentDat &= 0xf0;
	data0 |= SentDat;
	
	//同步信号
	//0.4ms高电平
	coding[0] = OOKSmallH;
	coding[1] = OOKSmallH;
	//12.8ms低电平
	coding[2] = OOKTongH;
	coding[3] = OOKTongL;
	
	//将高低电平编入数组
	for(i = 4;i < 100;i++)
	{
		if(i == 4)  dat = data2;
		if(i == 36) dat = data1;
		if(i == 68) dat = data0;
		for(j = 0;j < 8;j++)
		{
			if(dat & 0x80 == 1)
			{
				//1.2ms高电平
				coding[i] = OOKBigH;i++;
				coding[i] = OOKBigL;i++;
				//0.4ms低电平
				coding[i] = OOKSmallH;i++;
				coding[i] = OOKSmallL;i++;
			}
			else
			{
				//0.4ms高电平
				coding[i] = OOKSmallH;i++;
				coding[i] = OOKSmallL;i++;
				//1.2ms低电平
				coding[i] = OOKBigH;i++;
				coding[i] = OOKBigL;i++;
			}
			dat <<= 1;
		}
	}
}

void System_Init()
{//端口初始化
	P3M0 = 0x00;
	P3M1 = 0x00;
	
	//P3.0和P3.1为LED灯推挽输出口
	P3M0 |= 0x03;      //P3M0后两位置1，其他位保留
	P3M1 &= (~0x03);   //P3M1后两位置0，其他位保留

	//P3.4和P3.5为中断口，设置为开漏模式
	P3M0 |= 0x18;      //P3M0后4、5位置1，其他位保留
	P3M1 |= 0x18;      //P3M1后4、5位置1，其他位保留

	//LED灯关闭
	LED_WORK_STA = 0;
	YELLOW_BAT = 0;

//	INT1中断
//	INT1 = 1;
	IT1 = 1;                    //设置INT1的中断类型 (1:仅下降沿 0:上升沿和下降沿)
	EX1 = 1;                    //使能INT1中断
	EA = 1;

	//INT2中断
	INT_CLKO |= 0x10;  //(EX2 = 1)使能INT2中断
	EA = 1;

	//INT3中断
	INT_CLKO |= 0x20;  //(EX3 = 1)使能INT3中断
	EA = 1;	
	
	//定时器
	AUXR |= 0x80;                   //定时器0为1T模式
//  AUXR &= 0x7f;                 //定时器0为12T模式

	TMOD = 0x00;                    //设置定时器为模式0(16位自动重装载)
	TL0 = T1MS;                     //初始化计时值
	TH0 = T1MS >> 8;
	TR0 = 1;                        //定时器0开始计时
	ET0 = 1;                        //使能定时器0中断
	EA = 1;
	
}

void Delay10ms()		//@5.5296MHz
{
	unsigned char i, j;

	i = 54;
	j = 199;
	do
	{
		while (--j);
	} while (--i);
}

void Delay100ms()		//@5.5296MHz
{
	unsigned char i, j, k;

	_nop_();
	_nop_();
	i = 3;
	j = 26;
	k = 223;
	do
	{
		do
		{
			while (--k);
		} while (--j);
	} while (--i);
}

void Delay1000ms()		//@5.5296MHz
{
	unsigned char i, j, k;

	_nop_();
	_nop_();
	i = 22;
	j = 3;
	k = 227;
	do
	{
		do
		{
			while (--k);
		} while (--j);
	} while (--i);
}

void exint1() interrupt 2     //INT1中断入口，电池低压检测
{
	flag_VoltLow = 1;
}

void exint2() interrupt 10    //INT2中断入口，关门检测
{
	flag_Door = 1;
}

void exint3() interrupt 11    //INT3中断入口，开门检测
{
	flag_Door = 2;
}

/* Timer0 interrupt routine */
void tm0_isr() interrupt 1    //定时器0中断入口
{
    P10 = ! P10;                    //将测试口取反
}

int main(void)
{
	System_Init();
	while(1)
	{
		/*************************************开关门指示灯***************************************/
		if(flag_Door == 1)
		{//门关闭
			flag_Door = 0;
			Delay10ms();
			if(STA_DOOR_CLOSE == 1)
			{//门处于开门状态，只是收到扰动
				DoorSta = 0;
			}
			else if(STA_DOOR_CLOSE == 0)
			{//门处于关闭状态，门成功关闭
				LED_WORK_STA = 1;   //工作指示灯打开**
				Delay1000ms();
				LED_WORK_STA = 0;   //工作指示灯关闭**
				DoorSta = 1;
			}
		}
		else if(flag_Door == 2)
		{//门开启
			flag_Door = 0;
			Delay10ms();
			if(STA_DOOR_CLOSE == 1)
			{//门处于开门状态
				LED_WORK_STA = 1;   //工作指示灯打开
				Delay1000ms();
				LED_WORK_STA = 0;   //工作指示灯关闭
				DoorSta = 2;
			}
			else if(STA_DOOR_CLOSE == 0)
			{//门处于关闭状态，门收到扰动，并未开启
				DoorSta = 0;
			}
		}
		
		/***********************************电池低压检测*****************************************/
		if(flag_VoltLow)
		{
			if(flag_VoltLow == 1)
			{//电池低压检测
				Delay10ms();
				if(BAT_LOW == 0)  //进入中断后发现电池低压，说明电池处于低压状态中
				{
					flag_VoltLow = 2;
				}
				else              //进入中断后发现电池正常，说明是外界扰动导致低压，恢复flag
				{
					flag_VoltLow = 0;
				}
			}
			if(flag_VoltLow == 2)
			{//电池低压状态中
				YELLOW_BAT = 1;
				Delay1000ms();
				YELLOW_BAT = 0;
			}
		}
		else  //电池正常
		{
			
		}
